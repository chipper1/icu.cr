@[Link(ldflags: "`command -v pkg-config > /dev/null && pkg-config --libs icu-uc icu-i18n icu-io icu-lx icu-le || printf %s '-licuio -licui18n -liculx -licule -licuuc -licudata'`")]
lib LibICU
  fun uregex_append_replacement = uregex_appendReplacement_52(regexp : URegularExpression, replacement_text : UChar*, replacement_length : Int32T, dest_buf : UChar**, dest_capacity : Int32T*, status : UErrorCode*) : Int32T
  fun uregex_append_replacement_u_text = uregex_appendReplacementUText_52(regexp : URegularExpression, replacement_text : UText*, dest : UText*, status : UErrorCode*)
  fun uregex_append_tail = uregex_appendTail_52(regexp : URegularExpression, dest_buf : UChar**, dest_capacity : Int32T*, status : UErrorCode*) : Int32T
  fun uregex_append_tail_u_text = uregex_appendTailUText_52(regexp : URegularExpression, dest : UText*, status : UErrorCode*) : UText*
  fun uregex_clone = uregex_clone_52(regexp : URegularExpression, status : UErrorCode*) : URegularExpression
  fun uregex_close = uregex_close_52(regexp : URegularExpression)
  fun uregex_end64 = uregex_end64_52(regexp : URegularExpression, group_num : Int32T, status : UErrorCode*) : Int64T
  fun uregex_end = uregex_end_52(regexp : URegularExpression, group_num : Int32T, status : UErrorCode*) : Int32T
  fun uregex_find64 = uregex_find64_52(regexp : URegularExpression, start_index : Int64T, status : UErrorCode*) : UBool
  fun uregex_find = uregex_find_52(regexp : URegularExpression, start_index : Int32T, status : UErrorCode*) : UBool
  fun uregex_find_next = uregex_findNext_52(regexp : URegularExpression, status : UErrorCode*) : UBool
  fun uregex_flags = uregex_flags_52(regexp : URegularExpression, status : UErrorCode*) : Int32T
  fun uregex_get_find_progress_callback = uregex_getFindProgressCallback_52(regexp : URegularExpression, callback : (Void*, Int64T -> UBool)*, context : Void**, status : UErrorCode*)
  fun uregex_get_match_callback = uregex_getMatchCallback_52(regexp : URegularExpression, callback : (Void*, Int32T -> UBool)*, context : Void**, status : UErrorCode*)
  fun uregex_get_stack_limit = uregex_getStackLimit_52(regexp : URegularExpression, status : UErrorCode*) : Int32T
  fun uregex_get_text = uregex_getText_52(regexp : URegularExpression, text_length : Int32T*, status : UErrorCode*) : UChar*
  fun uregex_get_time_limit = uregex_getTimeLimit_52(regexp : URegularExpression, status : UErrorCode*) : Int32T
  fun uregex_get_u_text = uregex_getUText_52(regexp : URegularExpression, dest : UText*, status : UErrorCode*) : UText*
  fun uregex_group = uregex_group_52(regexp : URegularExpression, group_num : Int32T, dest : UChar*, dest_capacity : Int32T, status : UErrorCode*) : Int32T
  fun uregex_group_count = uregex_groupCount_52(regexp : URegularExpression, status : UErrorCode*) : Int32T
  fun uregex_group_u_text = uregex_groupUText_52(regexp : URegularExpression, group_num : Int32T, dest : UText*, group_length : Int64T*, status : UErrorCode*) : UText*
  fun uregex_group_u_text_deep = uregex_groupUTextDeep_52(regexp : URegularExpression, group_num : Int32T, dest : UText*, status : UErrorCode*) : UText*
  fun uregex_has_anchoring_bounds = uregex_hasAnchoringBounds_52(regexp : URegularExpression, status : UErrorCode*) : UBool
  fun uregex_has_transparent_bounds = uregex_hasTransparentBounds_52(regexp : URegularExpression, status : UErrorCode*) : UBool
  fun uregex_hit_end = uregex_hitEnd_52(regexp : URegularExpression, status : UErrorCode*) : UBool
  fun uregex_looking_at64 = uregex_lookingAt64_52(regexp : URegularExpression, start_index : Int64T, status : UErrorCode*) : UBool
  fun uregex_looking_at = uregex_lookingAt_52(regexp : URegularExpression, start_index : Int32T, status : UErrorCode*) : UBool
  fun uregex_matches64 = uregex_matches64_52(regexp : URegularExpression, start_index : Int64T, status : UErrorCode*) : UBool
  fun uregex_matches = uregex_matches_52(regexp : URegularExpression, start_index : Int32T, status : UErrorCode*) : UBool
  fun uregex_open = uregex_open_52(pattern : UChar*, pattern_length : Int32T, flags : Uint32T, pe : UParseError*, status : UErrorCode*) : URegularExpression
  fun uregex_open_c = uregex_openC_52(pattern : LibC::Char*, flags : Uint32T, pe : UParseError*, status : UErrorCode*) : URegularExpression
  fun uregex_open_u_text = uregex_openUText_52(pattern : UText*, flags : Uint32T, pe : UParseError*, status : UErrorCode*) : URegularExpression
  fun uregex_pattern = uregex_pattern_52(regexp : URegularExpression, pat_length : Int32T*, status : UErrorCode*) : UChar*
  fun uregex_pattern_u_text = uregex_patternUText_52(regexp : URegularExpression, status : UErrorCode*) : UText*
  fun uregex_refresh_u_text = uregex_refreshUText_52(regexp : URegularExpression, text : UText*, status : UErrorCode*)
  fun uregex_region_end64 = uregex_regionEnd64_52(regexp : URegularExpression, status : UErrorCode*) : Int64T
  fun uregex_region_end = uregex_regionEnd_52(regexp : URegularExpression, status : UErrorCode*) : Int32T
  fun uregex_region_start64 = uregex_regionStart64_52(regexp : URegularExpression, status : UErrorCode*) : Int64T
  fun uregex_region_start = uregex_regionStart_52(regexp : URegularExpression, status : UErrorCode*) : Int32T
  fun uregex_replace_all = uregex_replaceAll_52(regexp : URegularExpression, replacement_text : UChar*, replacement_length : Int32T, dest_buf : UChar*, dest_capacity : Int32T, status : UErrorCode*) : Int32T
  fun uregex_replace_all_u_text = uregex_replaceAllUText_52(regexp : URegularExpression, replacement : UText*, dest : UText*, status : UErrorCode*) : UText*
  fun uregex_replace_first = uregex_replaceFirst_52(regexp : URegularExpression, replacement_text : UChar*, replacement_length : Int32T, dest_buf : UChar*, dest_capacity : Int32T, status : UErrorCode*) : Int32T
  fun uregex_replace_first_u_text = uregex_replaceFirstUText_52(regexp : URegularExpression, replacement : UText*, dest : UText*, status : UErrorCode*) : UText*
  fun uregex_require_end = uregex_requireEnd_52(regexp : URegularExpression, status : UErrorCode*) : UBool
  fun uregex_reset64 = uregex_reset64_52(regexp : URegularExpression, index : Int64T, status : UErrorCode*)
  fun uregex_reset = uregex_reset_52(regexp : URegularExpression, index : Int32T, status : UErrorCode*)
  fun uregex_set_find_progress_callback = uregex_setFindProgressCallback_52(regexp : URegularExpression, callback : (Void*, Int64T -> UBool), context : Void*, status : UErrorCode*)
  fun uregex_set_match_callback = uregex_setMatchCallback_52(regexp : URegularExpression, callback : (Void*, Int32T -> UBool), context : Void*, status : UErrorCode*)
  fun uregex_set_region64 = uregex_setRegion64_52(regexp : URegularExpression, region_start : Int64T, region_limit : Int64T, status : UErrorCode*)
  fun uregex_set_region = uregex_setRegion_52(regexp : URegularExpression, region_start : Int32T, region_limit : Int32T, status : UErrorCode*)
  fun uregex_set_region_and_start = uregex_setRegionAndStart_52(regexp : URegularExpression, region_start : Int64T, region_limit : Int64T, start_index : Int64T, status : UErrorCode*)
  fun uregex_set_stack_limit = uregex_setStackLimit_52(regexp : URegularExpression, limit : Int32T, status : UErrorCode*)
  fun uregex_set_text = uregex_setText_52(regexp : URegularExpression, text : UChar*, text_length : Int32T, status : UErrorCode*)
  fun uregex_set_time_limit = uregex_setTimeLimit_52(regexp : URegularExpression, limit : Int32T, status : UErrorCode*)
  fun uregex_set_u_text = uregex_setUText_52(regexp : URegularExpression, text : UText*, status : UErrorCode*)
  fun uregex_split = uregex_split_52(regexp : URegularExpression, dest_buf : UChar*, dest_capacity : Int32T, required_capacity : Int32T*, dest_fields : UChar**, dest_fields_capacity : Int32T, status : UErrorCode*) : Int32T
  fun uregex_split_u_text = uregex_splitUText_52(regexp : URegularExpression, dest_fields : UText**, dest_fields_capacity : Int32T, status : UErrorCode*) : Int32T
  fun uregex_start64 = uregex_start64_52(regexp : URegularExpression, group_num : Int32T, status : UErrorCode*) : Int64T
  fun uregex_start = uregex_start_52(regexp : URegularExpression, group_num : Int32T, status : UErrorCode*) : Int32T
  fun uregex_use_anchoring_bounds = uregex_useAnchoringBounds_52(regexp : URegularExpression, b : UBool, status : UErrorCode*)
  fun uregex_use_transparent_bounds = uregex_useTransparentBounds_52(regexp : URegularExpression, b : UBool, status : UErrorCode*)
  type URegularExpression = Void*
end
